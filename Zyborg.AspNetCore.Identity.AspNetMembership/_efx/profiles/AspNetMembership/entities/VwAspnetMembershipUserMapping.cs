#pragma warning disable IDE0073 // The file header is missing or not located at the top of the file
/** THIS IS AUTOGENERATED BY CONJURE EFX **/
#pragma warning restore IDE0073 // The file header is missing or not located at the top of the file

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Zyborg.AspNetCore.Identity.AspNetMembership.Membership.Data.Mapping
{
    /// <summary>
    /// Allows configuration for an entity type <see cref="Zyborg.AspNetCore.Identity.AspNetMembership.Membership.Data.Entities.VwAspnetMembershipUser" />
    /// </summary>
    public partial class VwAspnetMembershipUserMap
        : IEntityTypeConfiguration<Zyborg.AspNetCore.Identity.AspNetMembership.Membership.Data.Entities.VwAspnetMembershipUser>
    {
        /// <summary>
        /// Configures the entity of type <see cref="Zyborg.AspNetCore.Identity.AspNetMembership.Membership.Data.Entities.VwAspnetMembershipUser" />
        /// </summary>
        /// <param name="builder">The builder to be used to configure the entity type.</param>
        public void Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Zyborg.AspNetCore.Identity.AspNetMembership.Membership.Data.Entities.VwAspnetMembershipUser> builder)
        {
            #region Generated Configure

            // table
            builder.ToView("vw_aspnet_MembershipUsers", "dbo");

            // key
            builder.HasNoKey();

            // properties
            builder.Property(t => t.UserId)
                .IsRequired()
                .HasColumnName("UserId")
                .HasColumnType("uniqueidentifier")
                ;
            builder.Property(t => t.PasswordFormat)
                .IsRequired()
                .HasColumnName("PasswordFormat")
                .HasColumnType("int")
                ;
            builder.Property(t => t.MobilePIN)
                .HasColumnName("MobilePIN")
                .HasColumnType("nvarchar(16)")
                .HasMaxLength(16)
                ;
            builder.Property(t => t.Email)
                .HasColumnName("Email")
                .HasColumnType("nvarchar(256)")
                .HasMaxLength(256)
                ;
            builder.Property(t => t.LoweredEmail)
                .HasColumnName("LoweredEmail")
                .HasColumnType("nvarchar(256)")
                .HasMaxLength(256)
                ;
            builder.Property(t => t.PasswordQuestion)
                .HasColumnName("PasswordQuestion")
                .HasColumnType("nvarchar(256)")
                .HasMaxLength(256)
                ;
            builder.Property(t => t.PasswordAnswer)
                .HasColumnName("PasswordAnswer")
                .HasColumnType("nvarchar(128)")
                .HasMaxLength(128)
                ;
            builder.Property(t => t.IsApproved)
                .IsRequired()
                .HasColumnName("IsApproved")
                .HasColumnType("bit")
                ;
            builder.Property(t => t.IsLockedOut)
                .IsRequired()
                .HasColumnName("IsLockedOut")
                .HasColumnType("bit")
                ;
            builder.Property(t => t.CreateDate)
                .IsRequired()
                .HasColumnName("CreateDate")
                .HasColumnType("datetime")
                ;
            builder.Property(t => t.LastLoginDate)
                .IsRequired()
                .HasColumnName("LastLoginDate")
                .HasColumnType("datetime")
                ;
            builder.Property(t => t.LastPasswordChangedDate)
                .IsRequired()
                .HasColumnName("LastPasswordChangedDate")
                .HasColumnType("datetime")
                ;
            builder.Property(t => t.LastLockoutDate)
                .IsRequired()
                .HasColumnName("LastLockoutDate")
                .HasColumnType("datetime")
                ;
            builder.Property(t => t.FailedPasswordAttemptCount)
                .IsRequired()
                .HasColumnName("FailedPasswordAttemptCount")
                .HasColumnType("int")
                ;
            builder.Property(t => t.FailedPasswordAttemptWindowStart)
                .IsRequired()
                .HasColumnName("FailedPasswordAttemptWindowStart")
                .HasColumnType("datetime")
                ;
            builder.Property(t => t.FailedPasswordAnswerAttemptCount)
                .IsRequired()
                .HasColumnName("FailedPasswordAnswerAttemptCount")
                .HasColumnType("int")
                ;
            builder.Property(t => t.FailedPasswordAnswerAttemptWindowStart)
                .IsRequired()
                .HasColumnName("FailedPasswordAnswerAttemptWindowStart")
                .HasColumnType("datetime")
                ;
            builder.Property(t => t.Comment)
                .HasColumnName("Comment")
                .HasColumnType("ntext")
                ;
            builder.Property(t => t.ApplicationId)
                .IsRequired()
                .HasColumnName("ApplicationId")
                .HasColumnType("uniqueidentifier")
                ;
            builder.Property(t => t.UserName)
                .IsRequired()
                .HasColumnName("UserName")
                .HasColumnType("nvarchar(256)")
                .HasMaxLength(256)
                ;
            builder.Property(t => t.MobileAlias)
                .HasColumnName("MobileAlias")
                .HasColumnType("nvarchar(16)")
                .HasMaxLength(16)
                ;
            builder.Property(t => t.IsAnonymous)
                .IsRequired()
                .HasColumnName("IsAnonymous")
                .HasColumnType("bit")
                ;
            builder.Property(t => t.LastActivityDate)
                .IsRequired()
                .HasColumnName("LastActivityDate")
                .HasColumnType("datetime")
                ;

            // relationships

            #endregion // Generated Configure
        }
    }
}
